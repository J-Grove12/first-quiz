diff --git a/part1/question1.py b/part1/question1.py
index 5c99fdb..01e9d85 100644
--- a/part1/question1.py
+++ b/part1/question1.py
@@ -20,6 +20,9 @@ def get_city_temperature(city):
       return 17
    if city == "San Francisco":
       return 16
+   if city == "New York":
+      return 14
+
 
 def get_city_weather(city):
 
@@ -29,6 +32,8 @@ def get_city_weather(city):
      sky_condition = "cloudy"
   elif city == "New York":
      sky_condition = "rainy"
+  elif city == "Quito":
+     sky_condition = "sunny"
 
   temperature = get_city_temperature(city)
 
diff --git a/part1/question2.py b/part1/question2.py
index 34a9b01..53eb987 100644
--- a/part1/question2.py
+++ b/part1/question2.py
@@ -18,4 +18,8 @@
 swapper = None
 
 def run_swapper(list_of_tuples):
-  return list(map(swapper, list_of_tuples))
\ No newline at end of file
+  return list(map(swapper, list_of_tuples))
+
+def swapper(tupla):
+  x, y = tupla
+  return (y, x)
diff --git a/part1/question3.py b/part1/question3.py
index 04fab99..55520c0 100644
--- a/part1/question3.py
+++ b/part1/question3.py
@@ -26,19 +26,21 @@
 # formulas and their outputs in the test file, `question3_test.py`.
 
 # This function should return an oven instance!
-def make_oven():
-  None
+from Oven import Oven
 
-def alchemy_combine(oven, ingredients, temperature):
+def make_oven():
+  oven = Oven() 
+  return oven
   
-  for item in ingredients:
-    oven.add(item)
+def alchemy_combine(oven, ingredients, temperature):
+        for item in ingredients:
+            oven.add(item)
 
-  if temperature < 0:
-    oven.freeze()
-  elif temperature >= 100:
-    oven.boil()
-  else:
-    oven.wait()
+        if temperature < 0:
+            oven.freeze()
+        elif temperature >= 100:
+            oven.boil()
+        else:
+            oven.wait()
 
-  return oven.get_output()
\ No newline at end of file
+        return oven.get_output()
\ No newline at end of file
diff --git a/part1/question3_test.py b/part1/question3_test.py
index 6cb6c89..35da5bf 100644
--- a/part1/question3_test.py
+++ b/part1/question3_test.py
@@ -1,3 +1,6 @@
+from question3 import alchemy_combine
+from question3 import make_oven
+
 def test_alchemy_combine():
 
   assert alchemy_combine(
diff --git a/part1/question4.py b/part1/question4.py
index 1e1b2bf..53ec01b 100644
--- a/part1/question4.py
+++ b/part1/question4.py
@@ -24,7 +24,10 @@ import pets_db
 
 sql_pets_owned_by_nobody = """
 
-Your SQL here.
+SELECT name, species, age
+FROM animals
+WHERE animal_id NOT IN (SELECT pet_id FROM people_animals)
+
 
 """
 
@@ -34,7 +37,11 @@ Your SQL here.
 
 sql_pets_older_than_owner = """
 
-Your SQL here.
+SELECT COUNT(*) 
+FROM people_animals
+JOIN animals ON people_animals.pet_id = animals.animal_id
+JOIN people ON people_animals.owner_id = people.person_id
+WHERE animals.age > people.age
 
 """
 
@@ -43,6 +50,12 @@ Your SQL here.
 # The output should be a list of tuples in the format: (<person name>, <pet name>, <species>)
 sql_only_owned_by_bessie = """ 
 
-Your SQL here.
+SELECT p.name, a.name, a.species
+FROM people p
+JOIN people_animals pa ON p.person_id = pa.owner_id
+JOIN animals a ON pa.pet_id = a.animal_id
+LEFT JOIN people_animals pa2 ON a.animal_id = pa2.pet_id AND pa2.owner_id != p.person_id
+WHERE p.name = 'Bessie'
+AND pa2.pet_id IS NULL;
 
 """
\ No newline at end of file
diff --git a/part1/question5.py b/part1/question5.py
index f76654f..3e33539 100644
--- a/part1/question5.py
+++ b/part1/question5.py
@@ -20,7 +20,11 @@
 
 sql_create_favorite_foods = """
 
-Your SQL here.
+CREATE TABLE favorite_foods (
+  food_id integer,
+  name text,
+  vegetarian integer)
+
 
 """
 
@@ -30,7 +34,11 @@ Your SQL here.
 
 sql_alter_tables_with_favorite_food = """
 
-Your SQL here.
+ALTER TABLE animals
+ADD COLUMN favorite_food_id integer;
+
+ALTER TABLE people
+ADD COLUMN favorite_food_id integer;
 
 """
 
@@ -40,6 +48,9 @@ Your SQL here.
 
 sql_select_all_vegetarian_pets = """
 
-Your SQL here.
+SELECT animals.name, favorite_foods.name
+FROM animals
+JOIN favorite_foods ON animals.favorite_food_id = favorite_foods.food_id
+WHERE favorite_foods.vegetarian = 1;
 
 """
\ No newline at end of file
diff --git a/part2/src/main/java/org/velezreyes/quiz/question6/Drink.java b/part2/src/main/java/org/velezreyes/quiz/question6/Drink.java
index 61c1fdd..610dc07 100644
--- a/part2/src/main/java/org/velezreyes/quiz/question6/Drink.java
+++ b/part2/src/main/java/org/velezreyes/quiz/question6/Drink.java
@@ -4,4 +4,8 @@ public interface Drink {
   public String getName();
 
   public boolean isFizzy();
-}
\ No newline at end of file
+
+    public void setPrice(int priceInCents);
+    
+
+    }
\ No newline at end of file
diff --git a/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java b/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java
index 85742c4..9193845 100644
--- a/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java
+++ b/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java
@@ -1,9 +1,59 @@
 package org.velezreyes.quiz.question6;
 
-public class VendingMachineImpl {
+import java.util.HashMap;
+import java.util.Map;
 
-  public static VendingMachine getInstance() {
-    // Fix me!
-    return null;
-  }
+public class VendingMachineImpl implements VendingMachine {
+    private int balance;
+    private Map<String, Drink> inventory;
+    
+
+    public VendingMachineImpl() {
+
+        this.balance = 0;
+        this.inventory = new HashMap<>();
+        
+    }
+
+    @Override
+    public void insertQuarter() {
+        balance += 25; 
+    }
+
+    @Override
+    public Drink pressButton(String name) throws NotEnoughMoneyException, UnknownDrinkException {
+        Drink drink = inventory.get(name);
+
+        if (drink == null) {
+            throw new UnknownDrinkException();
+        }
+
+        if (balance < 25) {
+            throw new NotEnoughMoneyException();
+        }
+
+        
+        balance -= 25;
+        return drink;
+    }
+
+ public void addDrink(String name, Drink drink, int priceInCents) {
+    inventory.put(name, drink);
+    // Establece el precio de la bebida en centavos
+    drink.setPrice(priceInCents);
 }
+
+
+    public int getBalance() {
+        return balance;
+    }
+    public static VendingMachine getInstance() {
+        return new VendingMachineImpl();
+    }
+
+    private void addDrink(String scootCola, boolean b, int i) {
+        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
+    }
+  
+    
+ }   
